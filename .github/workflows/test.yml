concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - 'master'
      - 'v1.18'
      - 'v2.0'
      - 'v2.1'
      - 'v2.2'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-22.04,ubuntu-24.04]
    runs-on: ["${{ matrix.os }}"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              ./target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}-v001
          restore-keys: |
            ${{ matrix.os }}-cargo-${{ hashFiles('rust-toolchain.toml') }}

      - name: Set rust version
        run: |
          RUST_VERSION="$(grep -oP 'channel = "\K\d\.\d+\.\d+(?=")' rust-toolchain.toml)"
          echo "RUST_VERSION=$RUST_VERSION" >> "$GITHUB_ENV"

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev protobuf-compiler

      - name: cargo tree
        run: |
          cargo tree
          git checkout Cargo.lock
          cargo tree --frozen

      - name: cargo fmt
        run: cargo +nightly fmt --all -- --check

      - name: cargo deny check advisories
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories

      - name: cargo clippy
        run: cargo clippy --workspace --all-targets #-- --deny=warnings

      - name: check
        run: cargo check --all-targets
      - name: check without default features
        run: cargo check --all-targets --no-default-features
      - name: check only with `metrics` feature
        run: cargo check --all-targets --no-default-features --features="metrics"
      - name: check only with `kafka` feature
        run: cargo check --all-targets --no-default-features --features="kafka"

      - name: Run tests
        run: cargo test --all-targets --verbose
